# graphql/schema.graphql
type Post @aws_api_key @aws_cognito_user_pools {
    postId: ID!
    channelId: ID!
    title: String!
    content: String
    imagePath: String
    author: String!
    status: String!
    totalLikes: Int!
    topLikes: [String]!
    totalComments: Int!
    topComments: [Comment]!
}

input PostInput {
    postId: ID!
    channelId: ID!
    title: String!
    content: String
    imagePath: String
}

input UpdatePostInput {
    postId: ID!
    channelId: ID!
    title: String
    content: String
    imagePath: String
}

type Comment @aws_api_key @aws_cognito_user_pools {
    commentId: ID!
    channelId: ID!
    postId: ID!
    comment: String!
    author: String!
    status: String!
    totalLikes: Int!
    topLikes: [String]!
}

input CommentInput {
    commentId: ID!
    postId: ID!
    channelId: ID!
    comment: String!
}

type Query {
    getPostById(postId: ID!): Post @aws_api_key @aws_cognito_user_pools
    listPosts(channelId: ID!): [Post]! @aws_api_key @aws_cognito_user_pools
    postsByUsername(channelId: ID!): [Post]! @aws_cognito_user_pools
}

type Mutation {
    createPost(post: PostInput!): Post! @aws_cognito_user_pools
    deletePost(postId: ID!): ID @aws_cognito_user_pools
    updatePost(post: UpdatePostInput!): Post @aws_cognito_user_pools
    createComment(comment: CommentInput!): Comment! @aws_cognito_user_pools
    deleteComment(commentId: ID!): Comment! @aws_cognito_user_pools
    likePost(postId: ID!): ID! @aws_cognito_user_pools
    unlikePost(postId: ID!): ID! @aws_cognito_user_pools
    likeComment(commentId: ID!): ID! @aws_cognito_user_pools
    unlikeComment(commentId: ID!): ID! @aws_cognito_user_pools
}

type Subscription {
    onCreatePost: Post! @aws_subscribe(mutations: ["createPost"])
}
